{"version":3,"sources":["components/UserListItem.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["UserListItem","user","onClick","className","username","src","profileImage","alt","lastName","gender","name","email","city","state","country","style","color","nationality","id","Footer","href","App","props","users","isLoading","errorMessage","handleClickDelete","bind","updatedList","this","filter","setState","getUserList","axios","get","then","response","data","results","map","login","uuid","first","last","location","nat","picture","large","catch","length","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.42ddf5e4.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction UserListItem({ user, onClick }) {\n  const handleClick = () => {\n    onClick(user.id);\n  };\n\n  return (\n    <li key={user.id} className={`${user.username} user`}>\n      <div className=\"image-container\">\n        <img\n          className=\"profile-image shadow\"\n          src={user.profileImage}\n          alt={user.lastName}\n        />\n      </div>\n\n      <div className=\"user-info\">\n        <h3 className=\"user-name\">\n          {user.gender === \"female\" ? (\n            <i className={`${user.gender} fa fa-female`}></i>\n          ) : (\n            <i className={`${user.gender} fa fa-male`}></i>\n          )}\n          {user.name} {user.lastName}{\" \"}\n        </h3>\n        <i className=\"email\">{user.email}</i>\n        <span className=\"location\">\n          {user.city}, {user.state}, {user.country}{\" \"}\n          <span style={{ color: \"red\" }}>\n            {user.nationality === \"US\" ? (\n              <img\n                className=\"country-flag\"\n                src={`http://www.geonames.org/flags/x/us.gif`}\n                alt=\"nationality - US Flag\"\n              />\n            ) : (\n              \"\"\n            )}\n          </span>\n        </span>\n      </div>\n\n      <button className=\"delete-btn fa fa-trash\" onClick={handleClick}>\n        {\" \"}\n        <span className=\"content\">Delete</span>\n      </button>\n      <hr className=\"horizental-line\" />\n    </li>\n  );\n}\n\nexport default UserListItem;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nfunction Footer() {\n  return (\n    <div id=\"Footer\">\n      Background Photo by{\" \"}\n      <a href=\"https://unsplash.com/@augustinewong?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">\n        Augustine Wong\n      </a>{\" \"}\n      on{\" \"}\n      <a href=\"https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">\n        Unsplash\n      </a>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport UserListItem from \"./components/UserListItem\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n      isLoading: true,\n      errorMessage: \"\",\n    };\n\n    this.handleClickDelete = this.handleClickDelete.bind(this);\n  }\n\n  handleClickDelete(id) {\n    const updatedList = this.state.users.filter((user) => user.id !== id);\n    this.setState({\n      users: updatedList,\n    });\n  }\n\n  componentDidMount() {\n    this.getUserList();\n  }\n\n  getUserList() {\n    axios\n      .get(\"https://randomuser.me/api/?results=25\")\n      .then((response) =>\n        response.data.results.map((user) => ({\n          id: `${user.login.uuid}`,\n          name: `${user.name.first}`,\n          lastName: `${user.name.last}`,\n          gender: `${user.gender}`,\n          username: `${user.login.username}`,\n          country: `${user.location.country}`,\n          nationality: `${user.nat}`,\n          city: `${user.location.city}`,\n          state: `${user.location.state}`,\n          email: `${user.email}`,\n          profileImage: `${user.picture.large}`,\n        }))\n      )\n      .then((users) => {\n        this.setState({\n          users,\n          isLoading: false,\n        });\n      })\n      .catch(() => {\n        this.setState({\n          isLoading: false,\n          errorMessage: \"Encountered Server Error. Please refresh your page...\",\n        });\n      });\n  }\n\n  render() {\n    const { isLoading, users } = this.state;\n    return (\n      <div className=\"user-list-app\">\n        <header>\n          <h1>Manage your list of random users</h1>\n          <h2>There are {users.length} users available...</h2>\n          <p className=\"paragraph\">\n            Please feel free to delete any user you want from the list below.\n            <br />\n            Then refresh the page to start over.\n          </p>\n        </header>\n\n        <ul className=\"grid-container fade-in\">\n          {!isLoading ? (\n            users.map((user) => {\n              return (\n                <UserListItem\n                  key={user.id}\n                  user={user}\n                  onClick={this.handleClickDelete}\n                />\n              );\n            })\n          ) : (\n            <div className=\"loading message\">\n              <div className=\"spinning-circle\"></div>\n              Please wait, the page still loading...\n            </div>\n          )}\n        </ul>\n\n        {this.state.errorMessage && (\n          <div className=\"error message\">\n            <div className=\"spinning-circle\"></div>\n            The server encounter an issue and is unable to complete your request.\n          </div>\n        )}\n\n        {!isLoading && this.state.users.length === 0 && (\n          <div className=\"list-empty message\">\n            Your list is empty. Please refresh...\n          </div>\n        )}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}